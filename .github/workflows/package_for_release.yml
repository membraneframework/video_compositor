name: package for release
on:
    workflow_dispatch: {}

jobs:
    # linux:
    #     runs-on: ubuntu-latest
    #     steps:
    #         - name: ðŸ›  Install system dependencies
    #           run: |
    #               sudo add-apt-repository ppa:ubuntuhandbook1/ffmpeg6
    #               sudo apt-get update -y -qq
    #               sudo apt-get install -y libegl1-mesa-dev libgl1-mesa-dri libxcb-xfixes0-dev ffmpeg libavcodec-dev libavformat-dev libavfilter-dev libavdevice-dev libopus-dev
    #         - name: ðŸ”§ Install the rust toolchain
    #           uses: dtolnay/rust-toolchain@stable
    #
    #         - name: ðŸ“¥ Checkout repo
    #           uses: actions/checkout@v3
    #
    #         - name: ðŸ“¦ Package
    #           run: cargo run --bin package_for_release
    #
    #         - uses: actions/upload-artifact@v3
    #           with:
    #             name: video_compositor_linux_x86_64.tar.gz
    #             path: video_compositor_linux_x86_64.tar.gz
    #
    #         - uses: actions/upload-artifact@v3
    #           with:
    #             name: video_compositor_with_web_renderer_linux_x86_64.tar.gz
    #             path: video_compositor_with_web_renderer_linux_x86_64.tar.gz

    linux-aarch64:
        runs-on: ubuntu-latest
        steps:
            - uses: actions/checkout@v4
              with:
                path: "repo"
            - uses: uraimo/run-on-arch-action@v2
              name: Build artifact
              id: build
              with:
                arch: aarch64
                distro: ubuntu_latest

                  # Not required, but speeds up builds
                githubToken: ${{ github.token }}

                  # Create an artifacts directory
                setup: |
                  mkdir -p "${PWD}/artifacts"

                  # Mount the artifacts directory as /artifacts in the container
                dockerRunArgs: |
                  --volume "${PWD}/artifacts:/artifacts"
                  --volume "${PWD}/repo:/repo"

                  # The shell to run commands with in the container
                shell: /bin/sh

                  # Install some dependencies in the container. This speeds up builds if
                  # you are also using githubToken. Any dependencies installed here will
                  # be part of the container image that gets cached, so subsequent
                  # builds don't have to re-install them. The image layer is cached
                  # publicly in your project's package repository, so it is vital that
                  # no secrets are present in the container state or logs.
                install: |
                  apt update -y -qq
                  apt install software-properties-common -y
                  add-apt-repository ppa:ubuntuhandbook1/ffmpeg6
                  apt-get update -y -qq
                  apt-get install -y libegl1-mesa-dev libgl1-mesa-dri libxcb-xfixes0-dev ffmpeg libavcodec-dev libavformat-dev libavfilter-dev libavdevice-dev libopus-dev curl git build-essential libssl-dev pkg-config libclang-dev
                  curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh -s -- -y
                  rm -rf /var/lib/apt/lists/*

                  # Produce a binary artifact and place it in the mounted volume
                run: |
                  . "$HOME/.cargo/env"
                  cd "/repo"
                  cargo run --bin package_for_release
                  cp *.tar.gz /artifacts

    # macos_x86_64:
    #     runs-on: macos-latest
    #     steps:
    #         - name: ðŸ›  Install system dependencies
    #           run: brew install ffmpeg
    #
    #         - name: ðŸ”§ Install the rust toolchain
    #           uses: dtolnay/rust-toolchain@stable
    #
    #         - name: ðŸ“¥ Checkout repo
    #           uses: actions/checkout@v3
    #
    #         - name: ðŸ“¦ Package
    #           run: cargo run --bin package_for_release
    #
    #         - uses: actions/upload-artifact@v3
    #           with:
    #             name: video_compositor_darwin_x86_64.tar.gz
    #             path: video_compositor_darwin_x86_64.tar.gz
    #
    #         - uses: actions/upload-artifact@v3
    #           with:
    #             name: video_compositor_with_web_renderer_darwin_x86_64.tar.gz
    #             path: video_compositor_with_web_renderer_darwin_x86_64.tar.gz

    # macos-aarch64:
    #     runs-on: macos-14
    #     steps:
    #         - name: ðŸ›  Install system dependencies
    #           run: brew install ffmpeg
    #
    #         - name: ðŸ”§ Install the rust toolchain
    #           uses: dtolnay/rust-toolchain@stable
    #
    #         - name: ðŸ“¥ Checkout repo
    #           uses: actions/checkout@v3
    #
    #         - name: ðŸ“¦ Package
    #           run: cargo run --bin package_for_release
    #
    #         - uses: actions/upload-artifact@v3
    #           with:
    #             name: video_compositor_darwin_aarch64.tar.gz
    #             path: video_compositor_darwin_aarch64.tar.gz
    #
    #         - uses: actions/upload-artifact@v3
    #           with:
    #             name: video_compositor_with_web_renderer_darwin_aarch64.tar.gz
    #             path: video_compositor_with_web_renderer_darwin_aarch64.tar.gz
